name: Flutter CI

on: push

jobs:

  build-and-release-android:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.19.0'

      - name: Find and Replace OpenAIP
        uses: jacobtomlinson/gha-find-replace@v3
        with:
          find: "@@___openaip_client_id__@@"
          replace: ${{ secrets.OPENAIP_CLIENT_ID }}
          include: "*.dart"
          regex: false

      - name: Install project dependencies
        run: flutter pub get

      - name: Install project dependencies (realm)
        run: dart run realm_dart install -t android   
        
      - name: Build artifacts
        run: flutter build apk --release

      - name: Sign APK with keystore
        uses: r0adkll/sign-android-release@v1
        id: sign_app
        with:
          releaseDirectory: build/app/outputs/apk/release
          signingKeyBase64: ${{ secrets.KEY_STORE }}
          alias: ${{ secrets.KEY_STORE_ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASS }}
          keyPassword: ${{ secrets.KEY_STORE_PASS }}
        env:
          BUILD_TOOLS_VERSION: "34.0.0"

      - name: Upload release APK
        uses: actions/upload-artifact@v4
        with:
          name: Android.apk
          path: ${{steps.sign_app.outputs.signedReleaseFile}}

  build-and-release-linux:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.19.0'
      - name: Update source repo
        run: sudo apt-get update
      - name: Pre-empt libunwind issue for gstreamer
        run: sudo apt-get install -y libunwind-dev
      - name: Install audioplayers dependencies
        run: sudo apt-get install -y libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
      - name: Install dependencies
        run: sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev
      - name: Install project dependencies
        run: flutter pub get
      - name: Install project dependencies (realm)
        run: dart run realm_dart install -t linux   
      - name: Build artifacts
        run: flutter build linux --release
      - name: Archive Release
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          filename: ${{github.ref_name}}-linux.zip
          directory: build/linux/x64/release/bundle
      - name: Linux Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: build/linux/x64/release/bundle/${{github.ref_name}}-linux.zip
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Linux
          path: build/linux/x64/release/bundle/${{github.ref_name}}-linux.zip

  build-and-release-windows:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.19.0'
      - name: Install project dependencies
        run: flutter pub get
      - name: Install project dependencies (realm)
        run: dart run realm_dart install -t windows   
      - name: Build artifacts
        run: flutter build windows --release
      - name: Build artifacts MSIX
        run: dart run msix:create
      - name: Archive Release
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          filename: ${{github.ref_name}}-windows.zip
          directory: build/windows/x64/runner/Release      
      - name: Windows Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: build/windows/x64/runner/Release/${{github.ref_name}}-windows.zip
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: WindowsX64
          path: build/windows/x64/runner/Release/${{github.ref_name}}-windows.zip

  build-and-release-macos:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.19.0'
      - name: Install project dependencies
        run: | 
          flutter pub get
          brew install create-dmg

      - name: Install project dependencies (realm)
        run: dart run realm_dart install -t macos
      - name: Build artifacts and sign
        run: |
          flutter build macos --release
          echo -n ${{ secrets.MACOS_DIST_CERTIFICATE }} | base64 --decode --output certificate.p12
          # create temporary keychain
          security create-keychain -p test_password sign.keychain
          security default-keychain -s sign.keychain
          security unlock-keychain -p test_password sign.keychain
          security import certificate.p12 -k sign.keychain -P ${{ secrets.MACOS_DIST_CERTIFICATE_PASSWORD }}  -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k test_password sign.keychain
          security find-identity
          # sign
          /usr/bin/codesign --force --deep -s LPHGYCR8ZX build/macos/Build/Products/Release/AvareX.app
          # delete keychain
          security delete-keychain sign.keychain
          rm certificate.p12

      - name: Create a dmg
        run: |
          cd build/macos/Build/Products/Release
          create-dmg \
            --volname "AvareX" \
            --window-pos 200 200 \
            --window-size 800 600 \
            --icon-size 130 \
            --text-size 14 \
            --icon "AvareX.app" 260 250 \
            --hide-extension "AvareX.app" \
            --app-drop-link 540 250 \
            --hdiutil-quiet \
            "AvareX.dmg" \
            "AvareX.app"
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: MacOS
          path: build/macos/Build/Products/Release/AvareX.dmg


  build-and-release-ios:
    runs-on: macos-latest

    steps:
    
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.19.0'

      - name: Install the Apple certificate and provisioning profile
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n ${{ secrets.IOS_BUILD_CERTIFICATE_BASE64 }} | base64 --decode --output $CERTIFICATE_PATH
          echo -n ${{ secrets.IOS_MOBILE_PROVISIONING_PROFILE_BASE64 }} | base64 --decode --output $PP_PATH
          # create temporary keychain
          security create-keychain -p ${{ secrets.IOS_GITHUB_KEYCHAIN_PASSWORD }} $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p ${{ secrets.IOS_GITHUB_KEYCHAIN_PASSWORD }} $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P ${{ secrets.IOS_BUILD_CERTIFICATE_PASSWORD }} -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
      - name: Install project dependencies
        run: flutter pub get

      - name: Install project dependencies (realm)
        run: dart run realm_dart install -t ios   

      - name: Build artifacts
          # always use --export-options-plist=ios/GithubActionsExportOptions.plist
          # run: flutter build ipa --release --export-options-plist=ios/GithubActionsExportOptions.plist

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
        

